// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Wechat.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Grpcs.Gateway.Wechat {
  public static partial class Component
  {
    static readonly string __ServiceName = "Grpcs.Gateway.Wechat.Component";

    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetBindUrlRequest> __Marshaller_Grpcs_Gateway_Wechat_GetBindUrlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetBindUrlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetBindUrlResponse> __Marshaller_Grpcs_Gateway_Wechat_GetBindUrlResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetBindUrlResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetInfoRequest> __Marshaller_Grpcs_Gateway_Wechat_GetInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetInfoResponse> __Marshaller_Grpcs_Gateway_Wechat_GetInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetAppIdRequest> __Marshaller_Grpcs_Gateway_Wechat_GetAppIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetAppIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetAppIdResponse> __Marshaller_Grpcs_Gateway_Wechat_GetAppIdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetAppIdResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetBindUrlRequest, global::Grpcs.Gateway.Wechat.GetBindUrlResponse> __Method_GetBindUrl = new grpc::Method<global::Grpcs.Gateway.Wechat.GetBindUrlRequest, global::Grpcs.Gateway.Wechat.GetBindUrlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBindUrl",
        __Marshaller_Grpcs_Gateway_Wechat_GetBindUrlRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetBindUrlResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetInfoRequest, global::Grpcs.Gateway.Wechat.GetInfoResponse> __Method_GetInfo = new grpc::Method<global::Grpcs.Gateway.Wechat.GetInfoRequest, global::Grpcs.Gateway.Wechat.GetInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInfo",
        __Marshaller_Grpcs_Gateway_Wechat_GetInfoRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetInfoResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetAppIdRequest, global::Grpcs.Gateway.Wechat.GetAppIdResponse> __Method_GetAppId = new grpc::Method<global::Grpcs.Gateway.Wechat.GetAppIdRequest, global::Grpcs.Gateway.Wechat.GetAppIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAppId",
        __Marshaller_Grpcs_Gateway_Wechat_GetAppIdRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetAppIdResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpcs.Gateway.Wechat.WechatReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Component</summary>
    public abstract partial class ComponentBase
    {
      /// <summary>
      ///获取授权链接
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetBindUrlResponse> GetBindUrl(global::Grpcs.Gateway.Wechat.GetBindUrlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取公众号/小程序信息（本接口可以重建refreshToken）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetInfoResponse> GetInfo(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///使用CODE获取授权的AppId
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetAppIdResponse> GetAppId(global::Grpcs.Gateway.Wechat.GetAppIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Component</summary>
    public partial class ComponentClient : grpc::ClientBase<ComponentClient>
    {
      /// <summary>Creates a new client for Component</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ComponentClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Component that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ComponentClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ComponentClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ComponentClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///获取授权链接
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetBindUrlResponse GetBindUrl(global::Grpcs.Gateway.Wechat.GetBindUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBindUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取授权链接
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetBindUrlResponse GetBindUrl(global::Grpcs.Gateway.Wechat.GetBindUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBindUrl, null, options, request);
      }
      /// <summary>
      ///获取授权链接
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetBindUrlResponse> GetBindUrlAsync(global::Grpcs.Gateway.Wechat.GetBindUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBindUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取授权链接
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetBindUrlResponse> GetBindUrlAsync(global::Grpcs.Gateway.Wechat.GetBindUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBindUrl, null, options, request);
      }
      /// <summary>
      ///获取公众号/小程序信息（本接口可以重建refreshToken）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetInfoResponse GetInfo(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取公众号/小程序信息（本接口可以重建refreshToken）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetInfoResponse GetInfo(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInfo, null, options, request);
      }
      /// <summary>
      ///获取公众号/小程序信息（本接口可以重建refreshToken）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetInfoResponse> GetInfoAsync(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取公众号/小程序信息（本接口可以重建refreshToken）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetInfoResponse> GetInfoAsync(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInfo, null, options, request);
      }
      /// <summary>
      ///使用CODE获取授权的AppId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetAppIdResponse GetAppId(global::Grpcs.Gateway.Wechat.GetAppIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///使用CODE获取授权的AppId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetAppIdResponse GetAppId(global::Grpcs.Gateway.Wechat.GetAppIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAppId, null, options, request);
      }
      /// <summary>
      ///使用CODE获取授权的AppId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetAppIdResponse> GetAppIdAsync(global::Grpcs.Gateway.Wechat.GetAppIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///使用CODE获取授权的AppId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetAppIdResponse> GetAppIdAsync(global::Grpcs.Gateway.Wechat.GetAppIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAppId, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ComponentClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ComponentClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ComponentBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetBindUrl, serviceImpl.GetBindUrl)
          .AddMethod(__Method_GetInfo, serviceImpl.GetInfo)
          .AddMethod(__Method_GetAppId, serviceImpl.GetAppId).Build();
    }

  }
  public static partial class Message
  {
    static readonly string __ServiceName = "Grpcs.Gateway.Wechat.Message";

    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.Empty> __Marshaller_Grpcs_Gateway_Wechat_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.MessageResponse> __Marshaller_Grpcs_Gateway_Wechat_MessageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.MessageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.MessageStatusRequest> __Marshaller_Grpcs_Gateway_Wechat_MessageStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.MessageStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.MessageStatusResponse> __Marshaller_Grpcs_Gateway_Wechat_MessageStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.MessageStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.SendTextRequest> __Marshaller_Grpcs_Gateway_Wechat_SendTextRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.SendTextRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.SendMessageResponse> __Marshaller_Grpcs_Gateway_Wechat_SendMessageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.SendMessageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.SendImageRequest> __Marshaller_Grpcs_Gateway_Wechat_SendImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.SendImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.SendNewsRequest> __Marshaller_Grpcs_Gateway_Wechat_SendNewsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.SendNewsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.SendWxAppCardRequest> __Marshaller_Grpcs_Gateway_Wechat_SendWxAppCardRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.SendWxAppCardRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetInfoRequest> __Marshaller_Grpcs_Gateway_Wechat_GetInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetTemplateResponse> __Marshaller_Grpcs_Gateway_Wechat_GetTemplateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetTemplateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.SendTemplateRequest> __Marshaller_Grpcs_Gateway_Wechat_SendTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.SendTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.Error> __Marshaller_Grpcs_Gateway_Wechat_Error = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.Error.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.Empty, global::Grpcs.Gateway.Wechat.MessageResponse> __Method_GetEvent = new grpc::Method<global::Grpcs.Gateway.Wechat.Empty, global::Grpcs.Gateway.Wechat.MessageResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetEvent",
        __Marshaller_Grpcs_Gateway_Wechat_Empty,
        __Marshaller_Grpcs_Gateway_Wechat_MessageResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.Empty, global::Grpcs.Gateway.Wechat.MessageResponse> __Method_GetUser = new grpc::Method<global::Grpcs.Gateway.Wechat.Empty, global::Grpcs.Gateway.Wechat.MessageResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetUser",
        __Marshaller_Grpcs_Gateway_Wechat_Empty,
        __Marshaller_Grpcs_Gateway_Wechat_MessageResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.MessageStatusRequest, global::Grpcs.Gateway.Wechat.MessageStatusResponse> __Method_GetStatus = new grpc::Method<global::Grpcs.Gateway.Wechat.MessageStatusRequest, global::Grpcs.Gateway.Wechat.MessageStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatus",
        __Marshaller_Grpcs_Gateway_Wechat_MessageStatusRequest,
        __Marshaller_Grpcs_Gateway_Wechat_MessageStatusResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.SendTextRequest, global::Grpcs.Gateway.Wechat.SendMessageResponse> __Method_SendText = new grpc::Method<global::Grpcs.Gateway.Wechat.SendTextRequest, global::Grpcs.Gateway.Wechat.SendMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendText",
        __Marshaller_Grpcs_Gateway_Wechat_SendTextRequest,
        __Marshaller_Grpcs_Gateway_Wechat_SendMessageResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.SendImageRequest, global::Grpcs.Gateway.Wechat.SendMessageResponse> __Method_SendImage = new grpc::Method<global::Grpcs.Gateway.Wechat.SendImageRequest, global::Grpcs.Gateway.Wechat.SendMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendImage",
        __Marshaller_Grpcs_Gateway_Wechat_SendImageRequest,
        __Marshaller_Grpcs_Gateway_Wechat_SendMessageResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.SendNewsRequest, global::Grpcs.Gateway.Wechat.SendMessageResponse> __Method_SendNews = new grpc::Method<global::Grpcs.Gateway.Wechat.SendNewsRequest, global::Grpcs.Gateway.Wechat.SendMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendNews",
        __Marshaller_Grpcs_Gateway_Wechat_SendNewsRequest,
        __Marshaller_Grpcs_Gateway_Wechat_SendMessageResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.SendWxAppCardRequest, global::Grpcs.Gateway.Wechat.SendMessageResponse> __Method_SendWxAppCard = new grpc::Method<global::Grpcs.Gateway.Wechat.SendWxAppCardRequest, global::Grpcs.Gateway.Wechat.SendMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendWxAppCard",
        __Marshaller_Grpcs_Gateway_Wechat_SendWxAppCardRequest,
        __Marshaller_Grpcs_Gateway_Wechat_SendMessageResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetInfoRequest, global::Grpcs.Gateway.Wechat.GetTemplateResponse> __Method_GetTemplate = new grpc::Method<global::Grpcs.Gateway.Wechat.GetInfoRequest, global::Grpcs.Gateway.Wechat.GetTemplateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTemplate",
        __Marshaller_Grpcs_Gateway_Wechat_GetInfoRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetTemplateResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.SendTemplateRequest, global::Grpcs.Gateway.Wechat.SendMessageResponse> __Method_SendTemplate = new grpc::Method<global::Grpcs.Gateway.Wechat.SendTemplateRequest, global::Grpcs.Gateway.Wechat.SendMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendTemplate",
        __Marshaller_Grpcs_Gateway_Wechat_SendTemplateRequest,
        __Marshaller_Grpcs_Gateway_Wechat_SendMessageResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.MessageStatusRequest, global::Grpcs.Gateway.Wechat.Error> __Method_Cancel = new grpc::Method<global::Grpcs.Gateway.Wechat.MessageStatusRequest, global::Grpcs.Gateway.Wechat.Error>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Cancel",
        __Marshaller_Grpcs_Gateway_Wechat_MessageStatusRequest,
        __Marshaller_Grpcs_Gateway_Wechat_Error);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpcs.Gateway.Wechat.WechatReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Message</summary>
    public abstract partial class MessageBase
    {
      /// <summary>
      ///获取Event信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetEvent(global::Grpcs.Gateway.Wechat.Empty request, grpc::IServerStreamWriter<global::Grpcs.Gateway.Wechat.MessageResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取用户发送的信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetUser(global::Grpcs.Gateway.Wechat.Empty request, grpc::IServerStreamWriter<global::Grpcs.Gateway.Wechat.MessageResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取消息详情
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.MessageStatusResponse> GetStatus(global::Grpcs.Gateway.Wechat.MessageStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///发送文本消息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendText(global::Grpcs.Gateway.Wechat.SendTextRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///发送图片消息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendImage(global::Grpcs.Gateway.Wechat.SendImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///发送图文消息（小程序为Link消息）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendNews(global::Grpcs.Gateway.Wechat.SendNewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///发送小程序卡片消息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendWxAppCard(global::Grpcs.Gateway.Wechat.SendWxAppCardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取模版列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetTemplateResponse> GetTemplate(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///发送模版消息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendTemplate(global::Grpcs.Gateway.Wechat.SendTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///取消消息(只有定时未开始的任务可以取消)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.Error> Cancel(global::Grpcs.Gateway.Wechat.MessageStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Message</summary>
    public partial class MessageClient : grpc::ClientBase<MessageClient>
    {
      /// <summary>Creates a new client for Message</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MessageClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Message that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MessageClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MessageClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MessageClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///获取Event信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Grpcs.Gateway.Wechat.MessageResponse> GetEvent(global::Grpcs.Gateway.Wechat.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取Event信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Grpcs.Gateway.Wechat.MessageResponse> GetEvent(global::Grpcs.Gateway.Wechat.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetEvent, null, options, request);
      }
      /// <summary>
      ///获取用户发送的信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Grpcs.Gateway.Wechat.MessageResponse> GetUser(global::Grpcs.Gateway.Wechat.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取用户发送的信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Grpcs.Gateway.Wechat.MessageResponse> GetUser(global::Grpcs.Gateway.Wechat.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetUser, null, options, request);
      }
      /// <summary>
      ///获取消息详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.MessageStatusResponse GetStatus(global::Grpcs.Gateway.Wechat.MessageStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取消息详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.MessageStatusResponse GetStatus(global::Grpcs.Gateway.Wechat.MessageStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatus, null, options, request);
      }
      /// <summary>
      ///获取消息详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.MessageStatusResponse> GetStatusAsync(global::Grpcs.Gateway.Wechat.MessageStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取消息详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.MessageStatusResponse> GetStatusAsync(global::Grpcs.Gateway.Wechat.MessageStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatus, null, options, request);
      }
      /// <summary>
      ///发送文本消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.SendMessageResponse SendText(global::Grpcs.Gateway.Wechat.SendTextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendText(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送文本消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.SendMessageResponse SendText(global::Grpcs.Gateway.Wechat.SendTextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendText, null, options, request);
      }
      /// <summary>
      ///发送文本消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendTextAsync(global::Grpcs.Gateway.Wechat.SendTextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendTextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送文本消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendTextAsync(global::Grpcs.Gateway.Wechat.SendTextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendText, null, options, request);
      }
      /// <summary>
      ///发送图片消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.SendMessageResponse SendImage(global::Grpcs.Gateway.Wechat.SendImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送图片消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.SendMessageResponse SendImage(global::Grpcs.Gateway.Wechat.SendImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendImage, null, options, request);
      }
      /// <summary>
      ///发送图片消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendImageAsync(global::Grpcs.Gateway.Wechat.SendImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送图片消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendImageAsync(global::Grpcs.Gateway.Wechat.SendImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendImage, null, options, request);
      }
      /// <summary>
      ///发送图文消息（小程序为Link消息）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.SendMessageResponse SendNews(global::Grpcs.Gateway.Wechat.SendNewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendNews(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送图文消息（小程序为Link消息）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.SendMessageResponse SendNews(global::Grpcs.Gateway.Wechat.SendNewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendNews, null, options, request);
      }
      /// <summary>
      ///发送图文消息（小程序为Link消息）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendNewsAsync(global::Grpcs.Gateway.Wechat.SendNewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendNewsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送图文消息（小程序为Link消息）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendNewsAsync(global::Grpcs.Gateway.Wechat.SendNewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendNews, null, options, request);
      }
      /// <summary>
      ///发送小程序卡片消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.SendMessageResponse SendWxAppCard(global::Grpcs.Gateway.Wechat.SendWxAppCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendWxAppCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送小程序卡片消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.SendMessageResponse SendWxAppCard(global::Grpcs.Gateway.Wechat.SendWxAppCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendWxAppCard, null, options, request);
      }
      /// <summary>
      ///发送小程序卡片消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendWxAppCardAsync(global::Grpcs.Gateway.Wechat.SendWxAppCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendWxAppCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送小程序卡片消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendWxAppCardAsync(global::Grpcs.Gateway.Wechat.SendWxAppCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendWxAppCard, null, options, request);
      }
      /// <summary>
      ///获取模版列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetTemplateResponse GetTemplate(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取模版列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetTemplateResponse GetTemplate(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTemplate, null, options, request);
      }
      /// <summary>
      ///获取模版列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetTemplateResponse> GetTemplateAsync(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取模版列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetTemplateResponse> GetTemplateAsync(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTemplate, null, options, request);
      }
      /// <summary>
      ///发送模版消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.SendMessageResponse SendTemplate(global::Grpcs.Gateway.Wechat.SendTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送模版消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.SendMessageResponse SendTemplate(global::Grpcs.Gateway.Wechat.SendTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendTemplate, null, options, request);
      }
      /// <summary>
      ///发送模版消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendTemplateAsync(global::Grpcs.Gateway.Wechat.SendTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送模版消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.SendMessageResponse> SendTemplateAsync(global::Grpcs.Gateway.Wechat.SendTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendTemplate, null, options, request);
      }
      /// <summary>
      ///取消消息(只有定时未开始的任务可以取消)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error Cancel(global::Grpcs.Gateway.Wechat.MessageStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Cancel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///取消消息(只有定时未开始的任务可以取消)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error Cancel(global::Grpcs.Gateway.Wechat.MessageStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Cancel, null, options, request);
      }
      /// <summary>
      ///取消消息(只有定时未开始的任务可以取消)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> CancelAsync(global::Grpcs.Gateway.Wechat.MessageStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///取消消息(只有定时未开始的任务可以取消)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> CancelAsync(global::Grpcs.Gateway.Wechat.MessageStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Cancel, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MessageClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MessageClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MessageBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetEvent, serviceImpl.GetEvent)
          .AddMethod(__Method_GetUser, serviceImpl.GetUser)
          .AddMethod(__Method_GetStatus, serviceImpl.GetStatus)
          .AddMethod(__Method_SendText, serviceImpl.SendText)
          .AddMethod(__Method_SendImage, serviceImpl.SendImage)
          .AddMethod(__Method_SendNews, serviceImpl.SendNews)
          .AddMethod(__Method_SendWxAppCard, serviceImpl.SendWxAppCard)
          .AddMethod(__Method_GetTemplate, serviceImpl.GetTemplate)
          .AddMethod(__Method_SendTemplate, serviceImpl.SendTemplate)
          .AddMethod(__Method_Cancel, serviceImpl.Cancel).Build();
    }

  }
  public static partial class WxApp
  {
    static readonly string __ServiceName = "Grpcs.Gateway.Wechat.WxApp";

    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest> __Marshaller_Grpcs_Gateway_Wechat_GetOpenIdByCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse> __Marshaller_Grpcs_Gateway_Wechat_GetOpenIdByCodeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.SetServiceDomainRequest> __Marshaller_Grpcs_Gateway_Wechat_SetServiceDomainRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.SetServiceDomainRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.Error> __Marshaller_Grpcs_Gateway_Wechat_Error = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.Error.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.DeployRequest> __Marshaller_Grpcs_Gateway_Wechat_DeployRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.DeployRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetQrCodeRequest> __Marshaller_Grpcs_Gateway_Wechat_GetQrCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetQrCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetQrCodeResponse> __Marshaller_Grpcs_Gateway_Wechat_GetQrCodeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetQrCodeResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest, global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse> __Method_GetOpenId = new grpc::Method<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest, global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOpenId",
        __Marshaller_Grpcs_Gateway_Wechat_GetOpenIdByCodeRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetOpenIdByCodeResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.SetServiceDomainRequest, global::Grpcs.Gateway.Wechat.Error> __Method_SetServiceDomain = new grpc::Method<global::Grpcs.Gateway.Wechat.SetServiceDomainRequest, global::Grpcs.Gateway.Wechat.Error>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetServiceDomain",
        __Marshaller_Grpcs_Gateway_Wechat_SetServiceDomainRequest,
        __Marshaller_Grpcs_Gateway_Wechat_Error);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.DeployRequest, global::Grpcs.Gateway.Wechat.Error> __Method_Deploy = new grpc::Method<global::Grpcs.Gateway.Wechat.DeployRequest, global::Grpcs.Gateway.Wechat.Error>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Deploy",
        __Marshaller_Grpcs_Gateway_Wechat_DeployRequest,
        __Marshaller_Grpcs_Gateway_Wechat_Error);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetQrCodeRequest, global::Grpcs.Gateway.Wechat.GetQrCodeResponse> __Method_GetQrCode = new grpc::Method<global::Grpcs.Gateway.Wechat.GetQrCodeRequest, global::Grpcs.Gateway.Wechat.GetQrCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQrCode",
        __Marshaller_Grpcs_Gateway_Wechat_GetQrCodeRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetQrCodeResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpcs.Gateway.Wechat.WechatReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of WxApp</summary>
    public abstract partial class WxAppBase
    {
      /// <summary>
      ///获取小程序用户openId
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse> GetOpenId(global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///设置小程序服务域名
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.Error> SetServiceDomain(global::Grpcs.Gateway.Wechat.SetServiceDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///部署小程序
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.Error> Deploy(global::Grpcs.Gateway.Wechat.DeployRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///生成参数二维码（临时）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetQrCodeResponse> GetQrCode(global::Grpcs.Gateway.Wechat.GetQrCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WxApp</summary>
    public partial class WxAppClient : grpc::ClientBase<WxAppClient>
    {
      /// <summary>Creates a new client for WxApp</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WxAppClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WxApp that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WxAppClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WxAppClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WxAppClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///获取小程序用户openId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse GetOpenId(global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOpenId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取小程序用户openId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse GetOpenId(global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOpenId, null, options, request);
      }
      /// <summary>
      ///获取小程序用户openId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse> GetOpenIdAsync(global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOpenIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取小程序用户openId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse> GetOpenIdAsync(global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOpenId, null, options, request);
      }
      /// <summary>
      ///设置小程序服务域名
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error SetServiceDomain(global::Grpcs.Gateway.Wechat.SetServiceDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetServiceDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///设置小程序服务域名
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error SetServiceDomain(global::Grpcs.Gateway.Wechat.SetServiceDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetServiceDomain, null, options, request);
      }
      /// <summary>
      ///设置小程序服务域名
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> SetServiceDomainAsync(global::Grpcs.Gateway.Wechat.SetServiceDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetServiceDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///设置小程序服务域名
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> SetServiceDomainAsync(global::Grpcs.Gateway.Wechat.SetServiceDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetServiceDomain, null, options, request);
      }
      /// <summary>
      ///部署小程序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error Deploy(global::Grpcs.Gateway.Wechat.DeployRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Deploy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///部署小程序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error Deploy(global::Grpcs.Gateway.Wechat.DeployRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Deploy, null, options, request);
      }
      /// <summary>
      ///部署小程序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> DeployAsync(global::Grpcs.Gateway.Wechat.DeployRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///部署小程序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> DeployAsync(global::Grpcs.Gateway.Wechat.DeployRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Deploy, null, options, request);
      }
      /// <summary>
      ///生成参数二维码（临时）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetQrCodeResponse GetQrCode(global::Grpcs.Gateway.Wechat.GetQrCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQrCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///生成参数二维码（临时）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetQrCodeResponse GetQrCode(global::Grpcs.Gateway.Wechat.GetQrCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQrCode, null, options, request);
      }
      /// <summary>
      ///生成参数二维码（临时）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetQrCodeResponse> GetQrCodeAsync(global::Grpcs.Gateway.Wechat.GetQrCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQrCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///生成参数二维码（临时）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetQrCodeResponse> GetQrCodeAsync(global::Grpcs.Gateway.Wechat.GetQrCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQrCode, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WxAppClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WxAppClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WxAppBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetOpenId, serviceImpl.GetOpenId)
          .AddMethod(__Method_SetServiceDomain, serviceImpl.SetServiceDomain)
          .AddMethod(__Method_Deploy, serviceImpl.Deploy)
          .AddMethod(__Method_GetQrCode, serviceImpl.GetQrCode).Build();
    }

  }
  public static partial class WxWeb
  {
    static readonly string __ServiceName = "Grpcs.Gateway.Wechat.WxWeb";

    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetAuthCodeUrlRequest> __Marshaller_Grpcs_Gateway_Wechat_GetAuthCodeUrlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetAuthCodeUrlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetAuthCodeUrlResponse> __Marshaller_Grpcs_Gateway_Wechat_GetAuthCodeUrlResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetAuthCodeUrlResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest> __Marshaller_Grpcs_Gateway_Wechat_GetOpenIdByCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse> __Marshaller_Grpcs_Gateway_Wechat_GetOpenIdByCodeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetUserInfoRequest> __Marshaller_Grpcs_Gateway_Wechat_GetUserInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetUserInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetUserInfoResponse> __Marshaller_Grpcs_Gateway_Wechat_GetUserInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetUserInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetJsTicketRequest> __Marshaller_Grpcs_Gateway_Wechat_GetJsTicketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetJsTicketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetJsTicketResponse> __Marshaller_Grpcs_Gateway_Wechat_GetJsTicketResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetJsTicketResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetQrCodeRequest> __Marshaller_Grpcs_Gateway_Wechat_GetQrCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetQrCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetQrCodeResponse> __Marshaller_Grpcs_Gateway_Wechat_GetQrCodeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetQrCodeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.CreateMenuRequest> __Marshaller_Grpcs_Gateway_Wechat_CreateMenuRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.CreateMenuRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.Error> __Marshaller_Grpcs_Gateway_Wechat_Error = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.Error.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetInfoRequest> __Marshaller_Grpcs_Gateway_Wechat_GetInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetImageListRequest> __Marshaller_Grpcs_Gateway_Wechat_GetImageListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetImageListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.GetImageListResponse> __Marshaller_Grpcs_Gateway_Wechat_GetImageListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.GetImageListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.UploadImageRequest> __Marshaller_Grpcs_Gateway_Wechat_UploadImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.UploadImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.UploadImageResponse> __Marshaller_Grpcs_Gateway_Wechat_UploadImageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.UploadImageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcs.Gateway.Wechat.DeleteImageRequest> __Marshaller_Grpcs_Gateway_Wechat_DeleteImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcs.Gateway.Wechat.DeleteImageRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetAuthCodeUrlRequest, global::Grpcs.Gateway.Wechat.GetAuthCodeUrlResponse> __Method_GetAuthCodeUrl = new grpc::Method<global::Grpcs.Gateway.Wechat.GetAuthCodeUrlRequest, global::Grpcs.Gateway.Wechat.GetAuthCodeUrlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAuthCodeUrl",
        __Marshaller_Grpcs_Gateway_Wechat_GetAuthCodeUrlRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetAuthCodeUrlResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest, global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse> __Method_GetOpenId = new grpc::Method<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest, global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOpenId",
        __Marshaller_Grpcs_Gateway_Wechat_GetOpenIdByCodeRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetOpenIdByCodeResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetUserInfoRequest, global::Grpcs.Gateway.Wechat.GetUserInfoResponse> __Method_GetUserInfo = new grpc::Method<global::Grpcs.Gateway.Wechat.GetUserInfoRequest, global::Grpcs.Gateway.Wechat.GetUserInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserInfo",
        __Marshaller_Grpcs_Gateway_Wechat_GetUserInfoRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetUserInfoResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetJsTicketRequest, global::Grpcs.Gateway.Wechat.GetJsTicketResponse> __Method_GetJsTicket = new grpc::Method<global::Grpcs.Gateway.Wechat.GetJsTicketRequest, global::Grpcs.Gateway.Wechat.GetJsTicketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetJsTicket",
        __Marshaller_Grpcs_Gateway_Wechat_GetJsTicketRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetJsTicketResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetQrCodeRequest, global::Grpcs.Gateway.Wechat.GetQrCodeResponse> __Method_GetQrCode = new grpc::Method<global::Grpcs.Gateway.Wechat.GetQrCodeRequest, global::Grpcs.Gateway.Wechat.GetQrCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQrCode",
        __Marshaller_Grpcs_Gateway_Wechat_GetQrCodeRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetQrCodeResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.CreateMenuRequest, global::Grpcs.Gateway.Wechat.Error> __Method_CreateMenu = new grpc::Method<global::Grpcs.Gateway.Wechat.CreateMenuRequest, global::Grpcs.Gateway.Wechat.Error>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMenu",
        __Marshaller_Grpcs_Gateway_Wechat_CreateMenuRequest,
        __Marshaller_Grpcs_Gateway_Wechat_Error);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetInfoRequest, global::Grpcs.Gateway.Wechat.Error> __Method_DeleteMenu = new grpc::Method<global::Grpcs.Gateway.Wechat.GetInfoRequest, global::Grpcs.Gateway.Wechat.Error>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMenu",
        __Marshaller_Grpcs_Gateway_Wechat_GetInfoRequest,
        __Marshaller_Grpcs_Gateway_Wechat_Error);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.GetImageListRequest, global::Grpcs.Gateway.Wechat.GetImageListResponse> __Method_GetImageList = new grpc::Method<global::Grpcs.Gateway.Wechat.GetImageListRequest, global::Grpcs.Gateway.Wechat.GetImageListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetImageList",
        __Marshaller_Grpcs_Gateway_Wechat_GetImageListRequest,
        __Marshaller_Grpcs_Gateway_Wechat_GetImageListResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.UploadImageRequest, global::Grpcs.Gateway.Wechat.UploadImageResponse> __Method_UploadImage = new grpc::Method<global::Grpcs.Gateway.Wechat.UploadImageRequest, global::Grpcs.Gateway.Wechat.UploadImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UploadImage",
        __Marshaller_Grpcs_Gateway_Wechat_UploadImageRequest,
        __Marshaller_Grpcs_Gateway_Wechat_UploadImageResponse);

    static readonly grpc::Method<global::Grpcs.Gateway.Wechat.DeleteImageRequest, global::Grpcs.Gateway.Wechat.Error> __Method_DeleteImage = new grpc::Method<global::Grpcs.Gateway.Wechat.DeleteImageRequest, global::Grpcs.Gateway.Wechat.Error>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteImage",
        __Marshaller_Grpcs_Gateway_Wechat_DeleteImageRequest,
        __Marshaller_Grpcs_Gateway_Wechat_Error);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpcs.Gateway.Wechat.WechatReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of WxWeb</summary>
    public abstract partial class WxWebBase
    {
      /// <summary>
      ///用户code链接获取
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetAuthCodeUrlResponse> GetAuthCodeUrl(global::Grpcs.Gateway.Wechat.GetAuthCodeUrlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取浏览器用户openId
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse> GetOpenId(global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取用户信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetUserInfoResponse> GetUserInfo(global::Grpcs.Gateway.Wechat.GetUserInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取Js-Ticket
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetJsTicketResponse> GetJsTicket(global::Grpcs.Gateway.Wechat.GetJsTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///生成参数二维码（临时）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetQrCodeResponse> GetQrCode(global::Grpcs.Gateway.Wechat.GetQrCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///设置菜单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.Error> CreateMenu(global::Grpcs.Gateway.Wechat.CreateMenuRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除菜单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.Error> DeleteMenu(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取模版列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.GetImageListResponse> GetImageList(global::Grpcs.Gateway.Wechat.GetImageListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///上传图片素材
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.UploadImageResponse> UploadImage(global::Grpcs.Gateway.Wechat.UploadImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除图片素材
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpcs.Gateway.Wechat.Error> DeleteImage(global::Grpcs.Gateway.Wechat.DeleteImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WxWeb</summary>
    public partial class WxWebClient : grpc::ClientBase<WxWebClient>
    {
      /// <summary>Creates a new client for WxWeb</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WxWebClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WxWeb that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WxWebClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WxWebClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WxWebClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///用户code链接获取
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetAuthCodeUrlResponse GetAuthCodeUrl(global::Grpcs.Gateway.Wechat.GetAuthCodeUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuthCodeUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///用户code链接获取
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetAuthCodeUrlResponse GetAuthCodeUrl(global::Grpcs.Gateway.Wechat.GetAuthCodeUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAuthCodeUrl, null, options, request);
      }
      /// <summary>
      ///用户code链接获取
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetAuthCodeUrlResponse> GetAuthCodeUrlAsync(global::Grpcs.Gateway.Wechat.GetAuthCodeUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuthCodeUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///用户code链接获取
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetAuthCodeUrlResponse> GetAuthCodeUrlAsync(global::Grpcs.Gateway.Wechat.GetAuthCodeUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAuthCodeUrl, null, options, request);
      }
      /// <summary>
      ///获取浏览器用户openId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse GetOpenId(global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOpenId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取浏览器用户openId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse GetOpenId(global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOpenId, null, options, request);
      }
      /// <summary>
      ///获取浏览器用户openId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse> GetOpenIdAsync(global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOpenIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取浏览器用户openId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetOpenIdByCodeResponse> GetOpenIdAsync(global::Grpcs.Gateway.Wechat.GetOpenIdByCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOpenId, null, options, request);
      }
      /// <summary>
      ///获取用户信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetUserInfoResponse GetUserInfo(global::Grpcs.Gateway.Wechat.GetUserInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取用户信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetUserInfoResponse GetUserInfo(global::Grpcs.Gateway.Wechat.GetUserInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserInfo, null, options, request);
      }
      /// <summary>
      ///获取用户信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetUserInfoResponse> GetUserInfoAsync(global::Grpcs.Gateway.Wechat.GetUserInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取用户信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetUserInfoResponse> GetUserInfoAsync(global::Grpcs.Gateway.Wechat.GetUserInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserInfo, null, options, request);
      }
      /// <summary>
      ///获取Js-Ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetJsTicketResponse GetJsTicket(global::Grpcs.Gateway.Wechat.GetJsTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetJsTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取Js-Ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetJsTicketResponse GetJsTicket(global::Grpcs.Gateway.Wechat.GetJsTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetJsTicket, null, options, request);
      }
      /// <summary>
      ///获取Js-Ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetJsTicketResponse> GetJsTicketAsync(global::Grpcs.Gateway.Wechat.GetJsTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetJsTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取Js-Ticket
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetJsTicketResponse> GetJsTicketAsync(global::Grpcs.Gateway.Wechat.GetJsTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetJsTicket, null, options, request);
      }
      /// <summary>
      ///生成参数二维码（临时）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetQrCodeResponse GetQrCode(global::Grpcs.Gateway.Wechat.GetQrCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQrCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///生成参数二维码（临时）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetQrCodeResponse GetQrCode(global::Grpcs.Gateway.Wechat.GetQrCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQrCode, null, options, request);
      }
      /// <summary>
      ///生成参数二维码（临时）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetQrCodeResponse> GetQrCodeAsync(global::Grpcs.Gateway.Wechat.GetQrCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQrCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///生成参数二维码（临时）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetQrCodeResponse> GetQrCodeAsync(global::Grpcs.Gateway.Wechat.GetQrCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQrCode, null, options, request);
      }
      /// <summary>
      ///设置菜单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error CreateMenu(global::Grpcs.Gateway.Wechat.CreateMenuRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMenu(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///设置菜单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error CreateMenu(global::Grpcs.Gateway.Wechat.CreateMenuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMenu, null, options, request);
      }
      /// <summary>
      ///设置菜单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> CreateMenuAsync(global::Grpcs.Gateway.Wechat.CreateMenuRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMenuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///设置菜单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> CreateMenuAsync(global::Grpcs.Gateway.Wechat.CreateMenuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMenu, null, options, request);
      }
      /// <summary>
      ///删除菜单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error DeleteMenu(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMenu(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除菜单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error DeleteMenu(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMenu, null, options, request);
      }
      /// <summary>
      ///删除菜单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> DeleteMenuAsync(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMenuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除菜单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> DeleteMenuAsync(global::Grpcs.Gateway.Wechat.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMenu, null, options, request);
      }
      /// <summary>
      ///获取模版列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetImageListResponse GetImageList(global::Grpcs.Gateway.Wechat.GetImageListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetImageList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取模版列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.GetImageListResponse GetImageList(global::Grpcs.Gateway.Wechat.GetImageListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetImageList, null, options, request);
      }
      /// <summary>
      ///获取模版列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetImageListResponse> GetImageListAsync(global::Grpcs.Gateway.Wechat.GetImageListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetImageListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取模版列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.GetImageListResponse> GetImageListAsync(global::Grpcs.Gateway.Wechat.GetImageListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetImageList, null, options, request);
      }
      /// <summary>
      ///上传图片素材
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.UploadImageResponse UploadImage(global::Grpcs.Gateway.Wechat.UploadImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///上传图片素材
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.UploadImageResponse UploadImage(global::Grpcs.Gateway.Wechat.UploadImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UploadImage, null, options, request);
      }
      /// <summary>
      ///上传图片素材
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.UploadImageResponse> UploadImageAsync(global::Grpcs.Gateway.Wechat.UploadImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///上传图片素材
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.UploadImageResponse> UploadImageAsync(global::Grpcs.Gateway.Wechat.UploadImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UploadImage, null, options, request);
      }
      /// <summary>
      ///删除图片素材
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error DeleteImage(global::Grpcs.Gateway.Wechat.DeleteImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除图片素材
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpcs.Gateway.Wechat.Error DeleteImage(global::Grpcs.Gateway.Wechat.DeleteImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteImage, null, options, request);
      }
      /// <summary>
      ///删除图片素材
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> DeleteImageAsync(global::Grpcs.Gateway.Wechat.DeleteImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除图片素材
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpcs.Gateway.Wechat.Error> DeleteImageAsync(global::Grpcs.Gateway.Wechat.DeleteImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteImage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WxWebClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WxWebClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WxWebBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAuthCodeUrl, serviceImpl.GetAuthCodeUrl)
          .AddMethod(__Method_GetOpenId, serviceImpl.GetOpenId)
          .AddMethod(__Method_GetUserInfo, serviceImpl.GetUserInfo)
          .AddMethod(__Method_GetJsTicket, serviceImpl.GetJsTicket)
          .AddMethod(__Method_GetQrCode, serviceImpl.GetQrCode)
          .AddMethod(__Method_CreateMenu, serviceImpl.CreateMenu)
          .AddMethod(__Method_DeleteMenu, serviceImpl.DeleteMenu)
          .AddMethod(__Method_GetImageList, serviceImpl.GetImageList)
          .AddMethod(__Method_UploadImage, serviceImpl.UploadImage)
          .AddMethod(__Method_DeleteImage, serviceImpl.DeleteImage).Build();
    }

  }
}
#endregion
